import streamlit as st
st.set_page_config(layout="wide") 
import io
import requests
from PIL import Image

image1 = Image.open("tomatohome.jpg")
tomatohome = image1.resize((1800,400))
col1, col2, col3 = st.columns([1, 2, 1])
with col2: 

          image2 = Image.open("toma.gif")
toma = image2.resize((1800,400)) 
col1, col2, col3 = st.columns([1, 2, 1])
with col2:

# ---- Initialize session state for navigation ----
          if "current_page" not in st.session_state:
               st.session_state.current_page = "home"

st.markdown("""
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');

        * {
            font-family: 'Poppins', sans-serif;
        }

        body {
            font-family: 'Poppins', sans-serif;
        }

        h1, h2, h3, h4, h5, h6 {
            font-family: 'Poppins', sans-serif;
            font-weight: 600;
        }

        p, span, div {
            font-family: 'Poppins', sans-serif;
        }

        /* Make Streamlit Container Full-Width */
        .main .block-container {
            max-width: 100vw !important;  /* Force full width */
            padding-left: 0px !important;
            padding-right: 0px !important;
        }

        /* Remove default padding/margin */
        .reportview-container, .appview-container {
            padding: 0 !important;
            margin: 0 !important;
        }

        /* Override default Streamlit layout */
        .st-emotion-cache-z5fcl4 {  /* This class is dynamically generated by Streamlit */
            max-width: 100vw !important;
            padding-left: 0 !important;
            padding-right: 0 !important;
        }

        /* Remove extra body padding */
        body {
            overflow-x: hidden !important;  /* Prevent horizontal scrolling */
        }
               
        /* Main Navbar Container */
        .navbar {
            position: fixed;
            top: 58px;  /* Ensure navbar stays at the top */
            left: 0;
            width: 100vw;
            margin:0;
            background-color: #5eb64e;
            padding: 10px 20px;
            z-index: 1000;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0px 4px 8px rgba(0,0,0,0.2);
        }

        /* Left Menu Icon */
        .menu-icon {
            font-size: 24px;
            color: white;
            cursor: pointer;
            padding: 10px;
        }

        /* Navbar Links */
        .nav-links {
            display: flex;
            gap: 10px;
        }

        .nav-links a {
            color: white;
            text-decoration: none;
            font-size: 16px;
            font-weight: bold;
            padding: 8px 12px;
            transition: 0.3s;
        }

        .nav-links a:hover {
            border-radius: 5px;
        }

        /* Login Button */
        .login-btn {
            background-color: white;
            color: #3F4F44 !important;
            padding: 8px 15px;
            border-radius: 10px;
            font-size: 16px;
            font-weight: bold;
            border: 2px solid #3F4F44;
            cursor: pointer;
            text-decoration: none !important;
            display: inline-block;
        }

        .login-btn:hover {
            background-color: lightgray;
        }

    </style>

    <div class="navbar">
        <div class="menu-icon">‚ò∞</div>
        <div class="nav-links">
            <a href="/?page=home">Home</a>
            <a href="/?page=upload">Upload</a>
            <a href="/?page=about">About</a>
        </div>
        <a href="/?page=login" class="login-btn">Login</a>
    </div>
""", unsafe_allow_html=True)



# ---- Handle Navigation ----
query_params = st.query_params
if "page" in query_params:
    st.session_state.current_page = query_params["page"]

# ---- Page Content ----
st.markdown('<div class="main">', unsafe_allow_html=True)
if st.session_state.current_page == "home":
    # Title Section
    st.title("üçÖ Tomato Plant Disease Detection")
    st.subheader("Because Your Tomatoes Deserve VIP Treatment")

    st.write("""
        Plant diseases can have a devastating impact on crop yields and quality. 
        Early detection and intervention are crucial for preventing the spread and reducing losses.
        Our platform leverages AI technology to detect diseases from leaf images.
    """)

    # Impact Section
    st.subheader("üåç Importance of Early Detection")
    st.write("""
        - Timely detection can prevent crop loss and reduce the spread of diseases.
        - Helps farmers take necessary actions, reducing the need for excessive pesticide use.
        - Improves yield and ensures food security.
    """)
    

    # Image Section
    st.image(tomatohome, caption="Healthy Plant", use_container_width=False)

    # Awareness & Call-to-Action
    st.subheader("üõ°Ô∏è Protect Your Crops")
    st.write("""
         üö® **Why Worry About Tomato Diseases?**
    - Nobody likes a sad, wilted tomato.
    - Early detection = happy plants and even happier farmers.
    - Protect your crop like a pro and stay ahead of those sneaky plant diseases.
    """)
    # Additional Image
    st.image("toma.gif", caption="Tomato Plant", use_container_width=False)
    

    # CTA Section
    st.markdown("""
        ### üå± Get Started 
    - Upload a photo of your tomato plant's leaf.
    - Let our AI inspect your plant with its microscopic eye (just kidding, it‚Äôs pretty smart though).
    - Get instant results, so you can save your tomatoes before they throw in the towel. 
 
    üëâ **Navigate to the Upload Page to begin!**
    """, unsafe_allow_html=True)

elif st.session_state.current_page == "upload":
    st.title("üì§ Upload Page")
    use_camera = st.toggle("Use Real-time Camera")
    image = None

    if use_camera:
        camera_file = st.camera_input("Take a picture", key="camera_input")
        if camera_file:
            st.success("Camera image captured successfully!")
            image = Image.open(camera_file)
    else:
        uploaded_file = st.file_uploader("Choose a leaf image", type=["jpg", "png", "jpeg"], key="file_uploader")
        if uploaded_file:
            st.success("File uploaded successfully!")
            image = Image.open(uploaded_file)

    if image:
        resized_image = image.resize((150, 150))  # Resize uploaded/captured image to be smaller
        st.image(resized_image, caption="Selected Image", use_column_width=False)
        if st.button("Submit for Analysis"):
            st.success("Image submitted successfully!")
    

        # Send image to backend
        with io.BytesIO() as buffer:
            image.save(buffer, format="JPEG")
            buffer.seek(0)
            response = requests.post("http://127.0.0.1:8000/predict/", files={"file": buffer.getvalue()})

        if response.status_code == 200:
            result = response.json()
            st.write(f"### üå± Prediction: {result['prediction']}")
            st.write(f"Confidence: {result['confidence']:.2f}%")
        else:
            st.error("Failed to get prediction from backend")
            

elif st.session_state.current_page == "about":
    st.title("üçÖ About Tomato Plant Disease Detection")
    st.write("This AI-powered application helps detect diseases in tomato plants through image analysis, enabling farmers to take timely action.")
    with st.expander("üå± Why Tomato Plant Disease Detection?"):
        st.write("- Early detection prevents the spread of diseases and minimizes crop loss.\n- Reduces the need for excessive pesticide use, promoting eco-friendly farming.\n- Ensures healthier plants, boosting yield and improving food security.")
    with st.expander("üß™ How Does It Work?"):
        st.write("1. Upload an image of a tomato plant leaf.\n2. The AI model analyzes the leaf for signs of disease.\n3. Get instant results with disease predictions and confidence levels.")
    with st.expander("üö® Common Tomato Plant Diseases Detected"):
        st.write("- Early Blight\n- Late Blight\n- Septoria Leaf Spot\n- Bacterial Spot")
    with st.expander("‚ùì Frequently Asked Questions"):
        st.write("**Q: Is the detection process instant?**\nA: Yes! The AI analyzes the image in seconds and provides results immediately.")
        st.write("**Q: Do I need a high-quality camera to capture the leaf image?**\nA: No, even smartphone cameras work well as long as the leaf is clearly visible.")
        st.write("**Q: Can the tool detect multiple diseases in one leaf?**\nA: Yes, the AI model can identify multiple diseases if present.")
        st.write("**Q: Is this tool free to use?**\nA: Absolutely! Protecting tomato plants should be accessible to everyone.")
    st.write("\nüìß **Contact Us:** Got questions? Drop us a vine at archanashalini@gmail.com üåü")
    st.write(" üíª **Visit Our Website:** [Tomato Disease Detection](https://example.com) ‚Äî It's the ketchup to your curiosity! üíÉ")
    st.image("dancetomo.gif", caption="Have a nice", use_column_width=False)

    #login
elif st.session_state.current_page == "login":
    st.title("üîê Login Page")      
    st.text_input("Username")
    st.text_input("Password", type="password")
    if st.button("Login"):
        st.success("Login button clicked!")

else:
    st.error("Page not found!")

st.markdown('</div>',unsafe_allow_html=True)